sh -c 'set -u;fc() { [ -x "./node_modules/.bin/$1" ]&&{ printf "%s\n" "./node_modules/.bin/$1";return 0; }||{ command -v "$1" >/dev/null 2>&1&&command -v "$1"||return 1;};};E=$(fc eslint)||{ echo "eslint not found.";exit 1;};T=$(fc tsc)||{ echo "tsc not found.";exit 1;};N=$(command -v node)||{ echo "node not found.";exit 1;};mf() { mktemp 2>/dev/null||{ f="/tmp/portable.$$.$1";(umask 077;: >"$f");printf "%s\n" "$f";};};j=$(mf eslint.json);t=$(mf tsc.out);o=$(mf out.txt);f=$(mf files.list);"$E" . --no-color -f json >"$j" 2>"$j.err"||:;"$T" --noEmit --incremental false --pretty false >"$t" 2>&1||:;"$N" -e '\''const fs=require("fs"),path=require("path"),pwd=process.argv[2],j=process.argv[3],t=process.argv[4],o=process.argv[5],f=process.argv[6];const L=[],S=new Set();function A(u){if(!u)return;try{const r=path.resolve(pwd,u);let a;try{a=fs.realpathSync.native(r)}catch{a=r}S.add(a)}catch{}}try{const a=JSON.parse(fs.readFileSync(j,"utf8"));for(const e of a){if(e&&Array.isArray(e.messages)&&e.messages.length){const r=path.relative(pwd,e.filePath||"");for(const m of e.messages){const R=m.ruleId?` [${m.ruleId}]`:"";L.push(`${r}:${m.line||0}:${m.column||0}: ${m.severity===2?"error":"warn"}: ${m.message}${R}`)}A(e.filePath)}}}catch{}try{const x=fs.readFileSync(t,"utf8"),rp=/^(.+?)\\((\\d+),(\\d+)\\):\\s*error TS\\d+:\\s*(.+)$/gm,rc=/^(.+?):(\\d+):(\\d+)\\s*-\\s*error TS\\d+:\\s*(.+)$/gm;function P(re){let m;while((m=re.exec(x))!==null){const ap=m[1],ln=m[2],cl=m[3],mg=m[4],r=path.relative(pwd,ap);L.push(`${r}:${ln}:${cl}: error: ${mg}`);A(ap)}}P(rp);P(rc)}catch{}if(L.length){L.unshift("The following are the diagnostics from the TypeScript compiler and ESLint. Tell me how to fix every error and/or warning. Tell me exactly what lines I need to modify in what file and what I need to change them to.","");fs.writeFileSync(o,L.join("\\n")+"\\n","utf8");fs.writeFileSync(f,Array.from(S).join("\\n")+"\\n","utf8")}else{try{fs.writeFileSync(o,"")}catch{}try{fs.writeFileSync(f,"")}catch{}}'\'' "$PWD" "$j" "$t" "$o" "$f";[ -s "$o" ]&&while IFS= read -r p;do [ -f "$p" ]||continue;printf "\n## %s\n" "$p">>"$o";nl -b a "$p">>"$o";done<"$f";cc() { command -v pbcopy >/dev/null 2>&1&&{ pbcopy;return 0;};command -v wl-copy >/dev/null 2>&1&&{ wl-copy;return 0;};command -v xclip >/dev/null 2>&1&&{ xclip -selection clipboard;return 0;};command -v xsel >/dev/null 2>&1&&{ xsel --clipboard --input;return 0;};command -v clip.exe >/dev/null 2>&1&&{ clip.exe;return 0;};return 1;};R=0;k() { rm -f -- "$j" "$t" "$f";[ "${R:-0}" -eq 1 ]&&rm -f -- "$o";};trap k 0 INT TERM HUP;if [ -s "$o" ];then if cc<"$o";then echo "Copied context to clipboard.";R=1;else echo "Diagnostics found. Clipboard tool not available. See: $o";R=0;fi;else echo "No warnings or errors found. Nothing was copied to clipboard.";R=1;fi'
